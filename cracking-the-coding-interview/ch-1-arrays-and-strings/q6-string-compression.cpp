/**
* Created by Joe Nyugoh Ngigi on 11/19/19 8:39 AM.
* Copyright (c) 2019 Que Base Tech. All rights reserved.
*/
#include <iostream>
#include <sstream>
#include <cmath>
#include <unordered_map>
#include <stdlib.h>     /* strtoull */

#include <vector>
#include <cstring>

using namespace std;

string compressString(string s1)
{
    string s2;
    stringstream compressed;
    int consecutive = 0;
    for(int i=0;i < s1.length();i++){
        consecutive +=1;
        if(i+1 >= s1.length() || s1[i] != s1[i+1]){
            compressed << s1[i] << consecutive ;
            consecutive = 0;
        }
    }
    compressed >> s2;
    return s2.length()< s1.length()? s2:s1;
}

int convertBinaryToDecimal(long long n)
{
    int decimalNumber = 0, i = 0, remainder;
    while (n!=0)
    {
        remainder = n%10;
        n /= 10;
        decimalNumber += remainder*pow(2,i);
        ++i;
    }
    return decimalNumber;
}

int main(int argvc, char *argv[])
{
/*    string s1 = "aaabccccAAAAdddeeee";
//    s1 = "abcde";
    cout << "Original string : " << s1 << endl;
    cout << "Compresses string: " << compressString(s1) << endl;*/


    /*string num = "1999";
    string minNumber ;
    int digit = 0, i = 0;
    num.reserve();
    cout << num;
    for(i=0;i< num.length();i++){
        digit = atoi(reinterpret_cast<const char *>(num[i]));
        // If digit equal to 0, simply append it
        if(digit ==0){
            minNumber += num[i];
        }
        // Only one digit reduce it and append and end loop
        if(digit == 1 && num.length() == 1){
            minNumber = "0";
            break;
        }
        // Reduce the number to 0 except for the first digit
        if(digit >0){
            if(i== num.length()){
                minNumber += "1";
            } else{
                minNumber += "0";
            }
        }
    }
    minNumber.reserve();
    cout << num << endl;
    cout << minNumber<< endl;

    */
/*    vector<int> a = {3,3,3,3,5};
    int pairs = 0, freq = 0;
    unordered_map<int, int> hashMap;
    for(auto i: a){
       if(hashMap.find(i) == hashMap.end()){
           // insert
           hashMap.insert({i, 1});
       } else {
           hashMap.at(i) += 1;
       }
    }
    for(auto it = hashMap.begin(); it != hashMap.end();it++){
        freq = it->second;
        if(freq>1){
            pairs += (int)pow(2, freq-1)-1;
        }
        cout << it->first << " =>" <<it->second << endl;
    }
return pairs;*/
    string S = "0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101";

    char chars[S.size()+1];
    strcpy(chars, S.c_str());
    unsigned long long n = strtoull(chars, NULL, 2);
    cout << n << endl;
    int steps = 0;
    while(1){
        if(n <= 0)
            break;
        if(n%2 ==0){
            n = n/2;
        } else {
            n -= 1;
        }
        steps += 1;
    }
    return steps;

}
